// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "expense-management-system/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Producer is an autogenerated mock type for the Producer type
type Producer[T model.Event] struct {
	mock.Mock
}

// GetTopic provides a mock function with no fields
func (_m *Producer[T]) GetTopic() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// Send provides a mock function with given fields: event
func (_m *Producer[T]) Send(event T) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProducer creates a new instance of Producer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducer[T model.Event](t interface {
	mock.TestingT
	Cleanup(func())
}) *Producer[T] {
	mock := &Producer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
