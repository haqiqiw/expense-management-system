// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	httpclient "expense-management-system/internal/httpclient"

	mock "github.com/stretchr/testify/mock"
)

// APIClient is an autogenerated mock type for the APIClient type
type APIClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, path
func (_m *APIClient) Delete(ctx context.Context, path string) (*httpclient.APIResponse, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *httpclient.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*httpclient.APIResponse, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *httpclient.APIResponse); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httpclient.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, path
func (_m *APIClient) Get(ctx context.Context, path string) (*httpclient.APIResponse, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *httpclient.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*httpclient.APIResponse, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *httpclient.APIResponse); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httpclient.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: ctx, path, body
func (_m *APIClient) Post(ctx context.Context, path string, body interface{}) (*httpclient.APIResponse, error) {
	ret := _m.Called(ctx, path, body)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *httpclient.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (*httpclient.APIResponse, error)); ok {
		return rf(ctx, path, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *httpclient.APIResponse); ok {
		r0 = rf(ctx, path, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httpclient.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, path, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, path, body
func (_m *APIClient) Put(ctx context.Context, path string, body interface{}) (*httpclient.APIResponse, error) {
	ret := _m.Called(ctx, path, body)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *httpclient.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (*httpclient.APIResponse, error)); ok {
		return rf(ctx, path, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *httpclient.APIResponse); ok {
		r0 = rf(ctx, path, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httpclient.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, path, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPIClient creates a new instance of APIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIClient {
	mock := &APIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
