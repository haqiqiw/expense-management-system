// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "expense-management-system/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ApprovalUsecase is an autogenerated mock type for the ApprovalUsecase type
type ApprovalUsecase struct {
	mock.Mock
}

// Approve provides a mock function with given fields: ctx, req
func (_m *ApprovalUsecase) Approve(ctx context.Context, req *model.ApprovalExpenseRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ApprovalExpenseRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reject provides a mock function with given fields: ctx, req
func (_m *ApprovalUsecase) Reject(ctx context.Context, req *model.ApprovalExpenseRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Reject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ApprovalExpenseRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewApprovalUsecase creates a new instance of ApprovalUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApprovalUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApprovalUsecase {
	mock := &ApprovalUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
