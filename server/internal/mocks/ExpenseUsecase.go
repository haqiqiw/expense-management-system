// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "expense-management-system/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ExpenseUsecase is an autogenerated mock type for the ExpenseUsecase type
type ExpenseUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *ExpenseUsecase) Create(ctx context.Context, req *model.CreateExpenseRequest) (*model.ExpenseCreateResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.ExpenseCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateExpenseRequest) (*model.ExpenseCreateResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateExpenseRequest) *model.ExpenseCreateResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExpenseCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateExpenseRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, req
func (_m *ExpenseUsecase) FindByID(ctx context.Context, req *model.GetExpenseRequest) (*model.ExpenseDetailResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.ExpenseDetailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetExpenseRequest) (*model.ExpenseDetailResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetExpenseRequest) *model.ExpenseDetailResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExpenseDetailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetExpenseRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *ExpenseUsecase) List(ctx context.Context, req *model.ListExpenseRequest) ([]model.ExpenseWithUserResponse, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.ExpenseWithUserResponse
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ListExpenseRequest) ([]model.ExpenseWithUserResponse, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.ListExpenseRequest) []model.ExpenseWithUserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ExpenseWithUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.ListExpenseRequest) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.ListExpenseRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewExpenseUsecase creates a new instance of ExpenseUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpenseUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpenseUsecase {
	mock := &ExpenseUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
