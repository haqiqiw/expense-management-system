// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	db "expense-management-system/internal/db"
	entity "expense-management-system/internal/entity"

	mock "github.com/stretchr/testify/mock"

	model "expense-management-system/internal/model"

	time "time"
)

// ExpenseRepository is an autogenerated mock type for the ExpenseRepository type
type ExpenseRepository struct {
	mock.Mock
}

// CompleteByIDTx provides a mock function with given fields: ctx, exec, id, processedAt
func (_m *ExpenseRepository) CompleteByIDTx(ctx context.Context, exec db.Executor, id uint64, processedAt time.Time) error {
	ret := _m.Called(ctx, exec, id, processedAt)

	if len(ret) == 0 {
		panic("no return value specified for CompleteByIDTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Executor, uint64, time.Time) error); ok {
		r0 = rf(ctx, exec, id, processedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, expense
func (_m *ExpenseRepository) Create(ctx context.Context, expense *entity.Expense) error {
	ret := _m.Called(ctx, expense)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Expense) error); ok {
		r0 = rf(ctx, expense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ExpenseRepository) FindByID(ctx context.Context, id uint64) (*entity.Expense, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entity.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*entity.Expense, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *entity.Expense); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDWithLock provides a mock function with given fields: ctx, exec, id
func (_m *ExpenseRepository) FindByIDWithLock(ctx context.Context, exec db.Executor, id uint64) (*entity.Expense, error) {
	ret := _m.Called(ctx, exec, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDWithLock")
	}

	var r0 *entity.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Executor, uint64) (*entity.Expense, error)); ok {
		return rf(ctx, exec, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.Executor, uint64) *entity.Expense); ok {
		r0 = rf(ctx, exec, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.Executor, uint64) error); ok {
		r1 = rf(ctx, exec, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDetailByID provides a mock function with given fields: ctx, id
func (_m *ExpenseRepository) FindDetailByID(ctx context.Context, id uint64) (*entity.ExpenseDetail, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindDetailByID")
	}

	var r0 *entity.ExpenseDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*entity.ExpenseDetail, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *entity.ExpenseDetail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ExpenseDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *ExpenseRepository) List(ctx context.Context, req *model.ListExpenseRequest) ([]entity.ExpenseWithUser, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.ExpenseWithUser
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ListExpenseRequest) ([]entity.ExpenseWithUser, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.ListExpenseRequest) []entity.ExpenseWithUser); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ExpenseWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.ListExpenseRequest) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.ListExpenseRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateStatusByIDTx provides a mock function with given fields: ctx, exec, id, status
func (_m *ExpenseRepository) UpdateStatusByIDTx(ctx context.Context, exec db.Executor, id uint64, status entity.ExpenseStatus) error {
	ret := _m.Called(ctx, exec, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusByIDTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Executor, uint64, entity.ExpenseStatus) error); ok {
		r0 = rf(ctx, exec, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExpenseRepository creates a new instance of ExpenseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpenseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpenseRepository {
	mock := &ExpenseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
